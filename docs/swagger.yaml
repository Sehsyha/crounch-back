basePath: /
definitions:
  account.User:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  builders.CategoryInGetListResponse:
    properties:
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: "#/definitions/builders.ProductInGetListResponse"
        type: array
    type: object
  builders.GetListResponse:
    properties:
      archivationDate:
        type: string
      categories:
        items:
          $ref: "#/definitions/builders.CategoryInGetListResponse"
        type: array
      contributors:
        items:
          $ref: "#/definitions/account.User"
        type: array
      creationDate:
        type: string
      id:
        type: string
      name:
        type: string
    required:
      - name
    type: object
  builders.ProductInGetListResponse:
    properties:
      bought:
        type: boolean
      category:
        $ref: "#/definitions/categories.Category"
      id:
        type: string
      name:
        type: string
      owner:
        $ref: "#/definitions/account.User"
    required:
      - name
    type: object
  categories.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  handler.CreateProductRequest:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  handler.ProductSearchRequest:
    properties:
      name:
        type: string
    type: object
  errors.Error:
    properties:
      error:
        type: string
      fields:
        items:
          $ref: "#/definitions/errors.FieldError"
        type: array
    type: object
  errors.FieldError:
    properties:
      error:
        type: string
      name:
        type: string
    type: object
  internal.Health:
    properties:
      alive:
        type: boolean
    type: object
  listing.ProductInListLink:
    properties:
      bought:
        type: boolean
      listId:
        type: string
      productId:
        type: string
    type: object
  listing.UpdateProductInList:
    properties:
      bought:
        type: boolean
    type: object
  ports.Contributor:
    properties:
      id:
        type: string
    type: object
  ports.CreateListRequest:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  ports.List:
    properties:
      contributors:
        items:
          $ref: "#/definitions/ports.Contributor"
        type: array
      creationDate:
        type: string
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: "#/definitions/ports.Product"
        type: array
    type: object
  ports.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  ports.Product:
    properties:
      id:
        type: string
    type: object
  ports.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
      - email
      - password
    type: object
  ports.TokenResponse:
    properties:
      token:
        type: string
    type: object
  products.Product:
    properties:
      category:
        $ref: "#/definitions/categories.Category"
      id:
        type: string
      name:
        type: string
      owner:
        $ref: "#/definitions/account.User"
    required:
      - name
    type: object
host: localhost:3000
info:
  contact: {}
  description: API serving the grocery application.
  title: Crounch Me API
  version: "1.0"
paths:
  /account/login:
    post:
      consumes:
        - application/json
      operationId: login
      parameters:
        - description: User to login with
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/ports.LoginRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/ports.TokenResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/errors.Error"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      summary: Creates a new user authorization when email is found and password is valid
      tags:
        - account
  /account/logout:
    post:
      operationId: logout
      responses:
        "204": {}
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/errors.Error"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Removes the user authorization when the user token is found
      tags:
        - account
  /account/signup:
    post:
      consumes:
        - application/json
      operationId: signup
      parameters:
        - description: User to signup with
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/ports.SignupRequest"
      responses:
        "201": {}
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/errors.Error"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      summary: Creates a new user with his email and password
      tags:
        - account
  /health:
    get:
      operationId: get-health
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/internal.Health"
        "500":
          description: Internal Server Error
      summary: Return health of application
  /listing/lists:
    get:
      operationId: get-contributors-lists
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/ports.List"
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/errors.Error"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Get the authenticated contributor accessible lists
      tags:
        - listing
    post:
      consumes:
        - application/json
      operationId: create-list
      parameters:
        - description: List to create
          in: body
          name: list
          required: true
          schema:
            $ref: "#/definitions/ports.CreateListRequest"
      produces:
        - application/json
      responses:
        "201": {}
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/errors.Error"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/errors.Error"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Create a list
      tags:
        - listing
  /lists/{listID}:
    delete:
      operationId: delete-list
      parameters:
        - description: List ID
          in: path
          name: listID
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204": {}
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Delete the entire list with its products
      tags:
        - list
    get:
      operationId: get-list
      parameters:
        - description: List ID
          in: path
          name: listID
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/builders.GetListResponse"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Reads a list with its product and contributor ids
      tags:
        - list
  /lists/{listID}/products/{productID}:
    delete:
      operationId: delete-product-from-list
      parameters:
        - description: List ID
          in: path
          name: listID
          required: true
          type: string
        - description: Product ID
          in: path
          name: productID
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204": {}
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Delete the product from the list
      tags:
        - product-in-list
    patch:
      consumes:
        - application/json
      operationId: update-product-in-list
      parameters:
        - description: Product in list
          in: body
          name: productInList
          required: true
          schema:
            $ref: "#/definitions/listing.UpdateProductInList"
        - description: Product in list
          in: path
          name: listID
          required: true
          type: string
        - description: Product in list
          in: path
          name: productID
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/listing.ProductInListLink"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Update the product in the list partially
      tags:
        - product-in-list
    post:
      operationId: add-product-to-list
      parameters:
        - description: List ID
          in: path
          name: listID
          required: true
          type: string
        - description: Product ID
          in: path
          name: productID
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/listing.ProductInListLink"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Add the product to the list
      tags:
        - product-in-list
  /products:
    post:
      operationId: create-product
      parameters:
        - description: Product to create
          in: body
          name: product
          required: true
          schema:
            $ref: "#/definitions/handler.CreateProductRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/products.Product"
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Create a new product
      tags:
        - product
  /products/search:
    post:
      operationId: search-default-products
      parameters:
        - description: Product search request
          in: body
          name: product
          required: true
          schema:
            $ref: "#/definitions/handler.ProductSearchRequest"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/products.Product"
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: "#/definitions/errors.Error"
      security:
        - ApiKeyAuth: []
      summary: Search a product by its name in default products, it removes accentuated characters and is case insensitive
      tags:
        - product
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
