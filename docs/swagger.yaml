basePath: /
definitions:
  errors.Error:
    properties:
      error:
        type: string
      fields:
        items:
          $ref: '#/definitions/errors.FieldError'
        type: array
    type: object
  errors.FieldError:
    properties:
      error:
        type: string
      name:
        type: string
    type: object
  ports.AddProductToListRequest:
    properties:
      listID:
        type: string
      productID:
        type: string
    required:
    - listID
    - productID
    type: object
  ports.BuyProductInListRequest:
    properties:
      listID:
        type: string
      productID:
        type: string
    required:
    - listID
    - productID
    type: object
  ports.ContributorResponse:
    properties:
      id:
        type: string
    type: object
  ports.CreateListRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  ports.CreateProductRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  ports.ListResponse:
    properties:
      contributors:
        items:
          $ref: '#/definitions/ports.ContributorResponse'
        type: array
      creationDate:
        type: string
      id:
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/ports.ProductResponse'
        type: array
    type: object
  ports.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  ports.ProductResponse:
    properties:
      id:
        type: string
    type: object
  ports.ProductSearchRequest:
    properties:
      name:
        type: string
    type: object
  ports.SignupRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  ports.TokenResponse:
    properties:
      token:
        type: string
    type: object
  products.Product:
    type: object
host: localhost:3000
info:
  contact: {}
  description: API serving the grocery application.
  title: Crounch Me API
  version: "1.0"
paths:
  /account/login:
    post:
      consumes:
      - application/json
      operationId: login
      parameters:
      - description: User to login with
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ports.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Creates a new user authorization when email is found and password is valid
      tags:
      - account
  /account/logout:
    post:
      operationId: logout
      responses:
        "204": {}
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Removes the user authorization when the user token is found
      tags:
      - account
  /account/signup:
    post:
      consumes:
      - application/json
      operationId: signup
      parameters:
      - description: User to signup with
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ports.SignupRequest'
      responses:
        "201": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      summary: Creates a new user with his email and password
      tags:
      - account
  /listing/lists:
    get:
      operationId: get-contributors-lists
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ports.ListResponse'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Get the authenticated contributor accessible lists
      tags:
      - listing
    post:
      consumes:
      - application/json
      operationId: create-list
      parameters:
      - description: List to create
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/ports.CreateListRequest'
      produces:
      - application/json
      responses:
        "201": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a list
      tags:
      - listing
  /listing/lists/:listID/archive: {}
  /listing/lists/{listID}:
    delete:
      operationId: delete-list
      parameters:
      - description: List UUID
        in: path
        name: listID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204": {}
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete the entire list with its products links and contributors
      tags:
      - listing
    get:
      operationId: get-list
      parameters:
      - description: List UUID
        in: path
        name: listID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.ListResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Reads a list with its product and contributor ids
      tags:
      - listing
  /listing/lists/{listID}/products/{productID}:
    delete:
      operationId: delete-product-from-list
      parameters:
      - description: List ID
        in: path
        name: listID
        required: true
        type: string
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      responses:
        "204": {}
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete the product in the list
      tags:
      - listing
  /listing/lists/products:
    patch:
      consumes:
      - application/json
      operationId: buy-product-in-list
      parameters:
      - description: Product in list request
        in: body
        name: productInListRequest
        required: true
        schema:
          $ref: '#/definitions/ports.BuyProductInListRequest'
      produces:
      - application/json
      responses:
        "204": {}
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Buys the product in the list
      tags:
      - listing
    post:
      operationId: add-product-to-list
      parameters:
      - description: List ID
        in: path
        name: listID
        required: true
        type: string
      - description: Product ID
        in: path
        name: productID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ports.AddProductToListRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Add the product to the list
      tags:
      - listing
  /products:
    post:
      operationId: create-product
      parameters:
      - description: Product to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ports.CreateProductRequest'
      responses:
        "204": {}
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new product, searchable by its creator
      tags:
      - products
  /products/search:
    post:
      operationId: search-default-products
      parameters:
      - description: Product search request
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ports.ProductSearchRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/products.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.Error'
      security:
      - ApiKeyAuth: []
      summary: Search a product by its name in default products, it removes accentuated characters and is case insensitive
      tags:
      - products
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
